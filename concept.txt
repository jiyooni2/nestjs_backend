GraphQL
    use graphql in nestJS
    npm i @nestjs/graphql graphql-tools graphql apollo-server-express

    nestjs/graphql : nestjs에서만의 graphql방식, work on top of the apollo-server-express

AppModule
    main.ts로 import되는 유일한 모듈(루트 모듈)
    main.ts에서 NestFactory.create로 애플리케이션 생성

    AppModule에 필요한 모듈을 추가해야함

    forRoot : configure the GraphQLModule
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
    }),

@Resolver
    resolvers.js 에서 작성하던 것들을 적으면 됨
    @Query(return type)
    @Mutation(return type)

    in graphql [temp], in TS temp[]

entity
    DB model과 비슷
    @ObjectType
    @Field(return type,options)

@Args
    query의 Args를 받을 수 있음
    @Args의 type은 graphql과 nest 모두에서 작동함
    
    @Mutation((returns) => Boolean)
    createRestaurant(
        @Args('name') name: string,
        @Args('isVegan') isVegan: boolean,
        @Args('address') address: string,
        @Args('ownerName') ownerName: string,
    ):Boolean {
        return true;
    }

    딱봐도 귀찮아보임, input Type을 만들 수 있음

Input Type
    전체 object를 전달 할 수 있음(dto)

@InputType vs @ArgsType
    InputType : 하나의 obj, arg로써 graphql에 전달, obj를 전달해줌
    ArgsType : 분리된 값들을 graphql arg로 전달해 줄 수 있도록 해줌, args의 이름을 쓰지 않아도 됨


Class Validator to ArgsType
    npm i class-validator
    validation pipeline 안만들면, validation 안됨
    
    dto에 validation을 적용하면, input data에서 먼저 걸러짐

    Class-validator works by setting metadata about fields via the decorators it uses, and can only do so much on type alone.
    The library then reads that metadata and checks it against the current type of the object/field and determines if its conditions are satisfied.
    The library is self contained so it doesn't need to go to a server or anything.
    라우터나 컨트롤러에 도달하기 전에 json body를 class-transformer를 통해서 class객체로 변환한 뒤에,
    class-validator로 검증을 하고 타입이 맞다면 컨트롤러/라우터에 전달(continue), 아니라면 바로 리턴

TypeORM(Object Relational Mapping)
    직접 SQL문 작성해서 DB로 보내는 것도 가능하지만
    TypeORM 사용하면, type을 쓸 수 있고 nest와도 연계 가능, DB상호작용 테스트 가능
    SQL을 쓰는 대신 코드를 사용해서 DB와 통신 가능
    많은 DB를 지원함

    TypeOrmModule
        synchronize
            entities 찾고 자동으로 migration
            DB의 구성을 자동으로 바꿔줌
            update the DB to reflect the typeOrm cols.

pgAdmin은 postgreSQL와 상호작용 하기 윈한 도구 일 뿐,
    postgreSQL server running check

TypeORM
    mongoose, sequelize 등등 있음
    typeORM : TS로 만들어지고 더 친화적
    npm install --save @nestjs/typeorm typeorm pg

.env in nestJS
    @nestjs/config
    
    runs on top of the dotenv 
    하지만 nestJS방식으로 동작


package.json에서 실행시에 NODE_ENV를 환경변수로 넘겨줄 수 있음
    use cross-env

use joi in validationSchema
    data validation tool
    environment variable validation

how to import Js module in TS
    import * as Name from "package";


entity
    DB에 저장되는 데이터의 형태를 보여주는 모델
    class that maps to a DB table
    
@ObjectType
    자동으로 스키마를 빌드하기 위해 사용하는 GraphQL decorator

@Entity
    TypeORM이 DB에 저장하게 해줄 것
    entity를 만든다음에, 어디에 있는지 TypeOrmModule에 알려줘야 저장

can combine @ObjectType and @Entity

Active Record vs Data Mapper : Data access patterns to DB
    Active Record
        extend BaseEntity
            user=new User();
            user.name="a"
            await user.save();
            User.find()

    Data Mapper
        use Repository
        Repository : Entity와 상호작용 하는걸 담당
        const userRepository = connection.getRepository(User);

        const user = new User();
        user.name="a"
        await userRepository.save(user);

        userRepository.find();
        
Data Mapper : 유지관리 하는걸 도와주고, 대규모 앱에서 유용
Active Record : 소규모 앱에서 단순하게 사용

NestJs : Repository를 사용하는 built-in modules 많음,

1. import repository
    imports:[TypeOrmModule.forFeature([Restaurant])]
    service에서 사용할 repository는 다 적어줘야 함

2. inject repository to service
    constructor(
    @InjectRepository(Restaurant)
    private readonly restaurants: Repository<Restaurant>,
  ) {} 


create vs save
    1.save : save in the DB  
    2.create : not touch the DB, just create class
        can use short code
    
async function 사용하려면, return type은 Promise<value>

@ObjectType, @Field로 graphql type을 만듦
    자동으로 graphql과 연동되어서 수정할 필요가 없음
@Entity, @Column로 DB 스키마도 만들고 있음
    entity를 변경하면 dto도 매번 같이 변경해야 됨
    어떻게 통합?
        use Mapped Types

Mapped Types
    Classes that allows us to generate a type from another type with transformations
    base type을 바탕으로 다른 버전들을 만들 수 있게 해줌
    
    Partial Type
        모든 필드가 required가 아닌 클래스를 만들어줌

    Pick Type
        몇가지 property를 선택해서 새로운 클래스를 만들어줌

    Omit Type    
        몇몇 필드를 제외하고 만듦

    Partial Type + Pick Type으로 몇가지만 + optional 조합 가능

    Intersection Type
        combine types
    
    모두 Inputtype을 만들어냄
    base class는 input type
    Mapped Types의 결과는 @InputType,
    ObjectType인 객체를 넣었으면, option에 decorator를 변경할 수 있음
    딱히 쓰지 않는다면, parent class와 동일한 type을 return
    parent와 child type이 다르다면, decorator 옵션을 넣어 줘야 함
    entity에 @InputType을 만들어서도 처리 가능


    //for the graphql
    @Field((type) => Boolean, { defaultValue: true })
    //for the DB
    @Column({ default: true })
    //for the dto validation, can send or not
    @IsOptional()
    @IsBoolean()
    isVegan?: boolean;


TypeORM
    createDateColumn() : 생성될 때 자동으로 엔티티에 추가

typescript
    enum A{

    }
    registerEnumType(UserRole, { name: 'UserRole' });
        GraphQL type 추가(enum)

Entity Listener
    특정 entity event를 listen하는 custom logic이 있는 method를 가질 수 있음
    AfterLoad, BeforeUpdate, BeforeInsert등 여러가지 event있음
    
    after create, make entity
    before save(=before insert), hash
    
Cannot find module
    절대경로인지 확인해보기, dist 한번 지우고 다시 실행

jwt
    1. using nest/jwt, passport-jwt
    2. using jsonwebtoken
    token
        누구나 볼 수 있음, private 정보를 담지 말자
        토큰 값이 수정되었다면 not validation 알 수 있음
        수정되면 더 이상 유효하지 않음
        시크릿 토큰 키를 가진 사람만이 토큰을 만들 수 있음
        내부에 담겨진 정보가 아닌 정보의 진위 여부가 중요한 것
    
ConfigService를 import하면, ConfigModule의 필요한 것들을 사용할 수 있음

Dependency Injection
    원하는 class만 적어주면, nestjs가 우리를 위해서 그 정보를 가져다 줌
    app.module등 module에서 import하면, 그 module이 어딘가에 존재, 아직 정보가 살아있음
    ConfigModule을 import한 것 만으로, ConfigService를 가질 수 있음
    ConfigService를 imports 하는 것만으로 원하는걸 불러올 수 있음
    
Module은 2가지 종류가 있음
    static module
        어떤 설정도 되어있지 않음
    dynamic module(.forRoot)
        설정이 적용되어 있는 모듈
        become a static module
            동적인 모듈에 여러가지 옵션을 적용시켜준 후
            리턴 값으로 설정한 옵션들이 존재하는 상태의 정적인 모듈을 내보내는 것
            동적 모듈은 그저 중간 과정일 뿐
        isGlobal:true
            글로벌로 설정돼있어서, import할 필요 없음
            ConfigService도
        

Module
    providers
        instantiated by Nest injector
        shared at least across the module
        원하는 class/value를 provide할 수 있게 해줌
        Injection 하고 싶은 건 모두 providers에 넣고 nestjs에 요청하면 됨

    
    controllers
        url
    
    imports
        list of imported modules that export the providers which are required in this module
    
    exports
        the subset of providers that are provided by this module
        should be available in other modules which import this module
        imports가 아니라 import임

    JwtModule에서 A를 exports하고,
    JwtModule을 AppModule에서 import를 하면,
    A를 AppModule의 전체에서 다 쓸 수 있는 것

    단순히, 인터페이스만 어떤건지, type만 지정해주면 쓸 수 있음
    클래스 타입만 보고 imports 정의 에서 찾아줌
    imports정의에 없으면, 못 씀

    providers:[JwtService]
    = [{provide:JwtService, useClass:JwtService}]
    이거 말고도, useClass대신 useValue를 사용해서 value를 보내는 등
    여러 값을 보낼 수 있음

Middleware in nestJS
    implements : class가 interface처럼 동작
    
    express에서 구현하는 것과 같음 
    
    middleware 정의
    export class JwtMiddleware implements NestMiddleware{
        use(req:Request,res:Response, next:NextFunction){
            console.log(req.headers);
            next();
        }
    }

    middleware 등록

    1. in App Module
    export class AppModule implements NestModule {
        configure(consumer: MiddlewareConsumer) {
            consumer
            .apply(JwtMiddleware)
            .forRoutes({ path: '/graphql', method: RequestMethod.POST });
        }
    }

    2.main.ts
    app.use(jwtMiddleware);
    전체 어플리케이션에서 사용
    클래스는 사용 불가, 함수형태로 넣어야 함

    어떤 route에 middleware를 적용할지 결정
    route결정 방법은 forRoutes, excludes등 있음


graphql로 request 공유
    req를 graphql resolver에 전달
    graphql module이 apollo server에서 모든걸 가져와 사용할 수 있음

    A request context is available for each request(called function for each request)
    when context is defined as a function, it will be called on each request and will receive an
    object containing a req property, which represents the request itself.
    
    can use context in all the resolvers

    configure in the GraphQLModule.forRoot()

resolver can access context using @Context()
    
authorization guard
    request를 다음단계로 진행할지 말지 결정
    guard가 필요한 resolver에서, @UseGuards(guard)
    if true, request 진행.
    if false, request 중단

    using CanActivate, access to context
    context = http
    gqlContext로 바꿔줘야함

Custom Decorator
    use CreateParamDecorator

repository.update()
    does not check if entity exist in the DB
    그저 db에 쿼를 보낼 뿐
    BeforeUpdate() trigger 못함
    BeforeUpdate는 특정 entity를 update해야 trigger
    use save() method

    save()
        saves all given entities in the db.
        entity없으면 create, 있으면 update

DB relationship
    @OneToOne
        @JoinColumn() is required
        must be set only on one side of the relation
        the side set @joinColumn on, that side's table will contain a relation id and foreign keys to target entity table.
    
    A로부터 B를 접근하고 싶으면, A에 JoinColumn이 있어야,
    A쪽에 외래키가 생성되면서 쉽게 접근

    TypeORM에서도 마찬가지로 관계는 굉장히 비싼 연산이므로 그냥 탐색하면 안나옴
    not load relationship default
    두번째 인자, options에서 relation or loadRelationId 사용


random code
    1.Math.random.toString()
    2.uuid

password rehash
    hash한 패스워드를 update하면 다시 또 hash될 수 있음
    find할 때, password는 포함되지 않도록 configure 
    
    @BeforeUpdate,BeforeInsert에서 password가 있어야 hash하게 설정
    @Column({select:false})
    
relation onDelete Cascade
    @OneToOne((type) => User, { onDelete: 'CASCADE' })
    CASCADE, DEFAULT 등등 DB 시간에 배웠던 것 다 있음
    
try~catch를 service로 다 넘겨줌
    resolver에서는 결과만 받을 수 있게 아키텍처 구성

    resolver
        input을 올바는 service로 전달
        service에는 로직이 정리
        
Mailgun
    Email Delivery Service(API)

email module
    mailer module in NestJs

cURL
    console.에서 API를 이용하기 위한 것

FromData
    node에서 form data를 사용하기 위한 라이브러리


npm run test:watch
    test file

test file
    fileName.spec.ts
    jest에서 test file을 .spec.ts로 찾기 때문
    
    
    testing module, test package를 테스팅 하기 전에 만들어야 함
    유저 서비스만을 가진 독립된 모듈을 제공, 유저 서비스를 테스팅
    유닛 테스팅 : 가능한 한 테스트를 독립시켜야 함

    typeORM에서 Repository를 제공
    UserService를 생성하려면, 다른 생성자들이 필요
        ex)userRepository, JwtModule등등
    그러기 위해서 Mocking

    Mock Repository
        mock is fake function
        진짜로 다른 서비스를 불러오고 싶은게 아님, 유저 서비스만 테스트하고 싶으니까

        fakeRepository, fakeService를 providers에 추가
        testing하고 싶은 것만 진짜로 불러오면 됨
    
    A unit testing, A의 모든 부분을 testing
        예외도 생각해봐야 함
        각 라인을 고립된 상태로 만들어야 함

    userRepository를 가져오긴 해야겠는데, mock type으로 만들고 싶음
    Partial : TS, 모든 타입을 optional
    Record : TS, <key,value> type 생성
    Repository<User>의 key를 key로, type은 jest.Mock으로 타입 생성
    let usersRepository: Partial<Record<keyof Repository<User>, jest.Mock>>;

    mock can fake the return value of the func.


    describe("createAccount",()=>{
        it("test",()=>{
            usersRepository.findOne.mockResolvedValue({
                id:1,
                email:"test@test.com"
            });

            const res = createAccount execute....

            expect(res).to......
        })
    })

    userRepository.findOne
        mock function
        중간에 값을 가로채서, 저 값을 resolved return(Promise type return)
        fake return value
        실제로 DB에 접속하거나, TypeORM의 repository를 쓰지 않고도 테스팅,
        독립적으로 UsersService만 testing 가능

    jest의 package.json에서 ignore file, testing file list를 설정할 수 있음
        "collectCoverageFrom": [
            "**/*.service.(t|j)s"
        ],
        "coveragePathIgnorePatterns": [
            "node_modules",
            ".entity.ts",
            "constants.ts"
        ]
        
        entity나 constants는 테스팅 할 필요가 없음
    
    각 함수를 다 mock으로 어떤 return value를 가질지 설정해줘야 함

    args check, 몇번 불렸는지, 인수로 뭐가 넘어갔는지 document 찾아보면 정말 많이 제공함
    error가 발생하게, exception이 발생하게 할 수 있음

    
    beforeAll
        module이 한번만 처음에 만들어짐
        call횟수가 누적될 수 있음
        보통 E2E testing

    beforeEach
        module이 각 테스트 직전에 새로 만들어짐
        보통 unit testing
    
E2E testing
    module 못 찾으면, jest-e2e.json 환경 변경
    TypeORM이 migration 알아서 다 해주고, 다 사용한 뒤에는 dropDatabase
    
    GraphQL
        엄청 많은 post request 더미
        Request Payload의 query에 넣어서 보냄

    afterAll에서 dropDatabase()를 하니까, 테스팅 동안의 DB변경사항은 다 저장됨

    toBe vs to Equal
        toBe : 정확해야 함
    
    module에서 repository를 get할 수 있음

    request.set을 통해서, header를 setting할 수 있음
    then : 한 이후에 또 testing
    e2e testing에서 unit testing에서 발견 못한 버그를 찾아낼 수 있음
        DB를 직접 생성해서 사용하니까



ManyToOne, OneToMany 같은 것 설정할때,
    DB nullable이랑, onUpdate, onDelete 설정

ObjectType과 InputType이 같은 이름을 가지면 type을 구분 못해서 에러가 발생
    이름을 다르게 지어주는게 좋음

@SetMetaData()
    Owner인 경우에만 createRestaurant 가능해야 함
    Delivery인 경우에만 Delivery 가능해야 함
    resolver에서 추가적으로 이용할 수 있는 데이터를 추가시키는 것

AuthGuard를 모든 resolver에 추가하고 싶으면,
    AuthModule에서 provide : APP_GUARD
    하면 모든 곳에 다 추가됨

Payment
    Paddle
        온라인 디지털 내용물에만 판매 가능
        API를 만들고, 월마다 몇 $ 청구 가능
        소프트웨어 판매 가능
        인터넷 포인트도 가능
        실제 물건(티셔츠,물건) 불가능
        회사가 아닌 개인도 사용 가능
        보안, 신용카드 정보 등 모두 다 프론트엔드에서 처리해줌



    Stripe
        한국 지원 X
        실제 회사가 있어야 사용 가능
        
    Braintree
        실제 회사가 있어야 함
        모든 국가 지원 X

관계 => expensive
    relation이나 loadRelationIds:true 등의 옵션을 주어야 함
    옵션을 줘서, 관계를 불러와야 함
    loadRelationId를 쓰면, 관계의 id만 불러옴, 모든 걸 가져오지 않음

@RelationId()
    RelationId에 대해서 Number로 추가적인 필드를 가질 수 있음
    Automatically load,
    option으로 줄 필요 없음, 비싼 연산이 아님


CustomRepository
    Repository에 custom method를 등록할 수 있음
    document보면 3가지 방법이 있음
    public method를 원하는지에 따라서 방법이 갈림
    
    Repository를 CustomRepository로 바꿧으면, Inject될 수 있게,
    repository를 module에서 load해줘야 겠지(in imports, TypeOrmModule.forFeature)
    

repository.remove vs repository.delete
    remove
        if it contains an array of Entities.
        존재하는 아이템을 지워야 함(없으면 오류 발생)
        지울 때 db에 두번 접근(있는지 확인 후 삭제)

    delete
        if you know the condition.
        존재하는지 체킹하지 않음(오류 발생 X)
        지울 때 빠르게 삭제(있는지 체킹 안함)

Computed Field
    GraphQL type으로 일단 선언해야겠지
    @ResolveField()로 선언
    entity,db에 저장되는 것 아님, user의 상태에 따라서 유연하게 계산

    부른 주체를 @Parent() 로 가져올 수 있음 
    하나하나씩 줌, 전체를 주지 않음

typeORM
    Like등 SQL문법 사용 가능
        where:{name:Like("%query%")}

    어떤 연산을 하건간에, 최적화 되어있는 DB를 사용하는게 좋음
    RAW(RAW_QUERY)
        SQL 쿼리 실행해줌

[A,B]=array
    하면 A=array[0], B=array[1]

새로운 entity 만든다음에 TypeORM module의 entities에 추가하는 것 잊지 말기

@OneToMany(arg1,arg2)
    arg1 : OneToMany의 type
    arg2 : function, Dish의 Restaurant를 어디서 찾을 수 있는지 알려줌
            항상 명시해줄 필요는 없음
            반대의 관계에서 찾을 필요 없으면 안써도 됨

json type
    구조화된 데이터를 저장
    특정 형태를 가진 데이터 저장
    DishOption을 json type으로 저장
        만약 relation의 관계로 이를 저장했다면, 가게 주인이 option을 바꾸면
        order에 dish의 option이 바뀌거나 set NULL이거나 등등.. 애매해짐
        하지만 json은 just string!
        orderItem : one Dish,
        dish has many items
    just json type, 실수를 해도 전혀 잡아낼 수 없음
    frontend에서 강제로 구조화를 해야 함
    새로운 resolver,dto,service 만들 일 없음
    flexibility는 올라가겠지.

1:N : OneToMany
N:1 : ManyToOne
M:N : ManyToMany
    @JoinTable()
    소유하고 있는 쪽의 relation에 추가
    TypeORM을 사용하면 M:N 관계를 해소해주기 위해서 자동으로 테이블 생성
    그러면... 굳이 ER 다이어그램에서 DB형태로 바꿀 필요가 없는 건 아닐까 싶음

forEach에서 return
    using return in a forEach() is equivalent to a continue in loop
    There is no way to stop or break a forEach() loop other than by throwing an exception. 
    If you need such behavior, the forEach() method is the wrong tool.

    return 하고 싶으면 for~of 사용!
    TS가 도와주지 않으면 체킹해보자!!

array.flat()
    array안에 array가 있으면, args차원의 array로 만들어줌
    모든 하위 array의 요소와 함께 새 array를 리턴 
    ex) flat(1) : 1차원 array안에 모든 아이템을 넣어줌
    

Subscription
    graphql-subscription allows you to use subscription in graphql
    실시간으로 무언가 처리

    PubSub : publish and subscribe
        app 내부에서 메세지 교환
    
    pubsub.asyncIterator(trigger)를 return 해야 함
        trigger : 우리가 기다리는 event, just string
        trigger 이벤트를 듣고 싶으면, subscription을 쓰면 됨 

    subscription이 연결하는 방법이 API를 연결하는 방법과 다름
    subscription에 연결하는 순간 HTTP route를 거치지 않고 Web Socket Route를 거침
    HTTP에서 사용했던 request is undefined.
    websocket에는 request없음, connection
    쿠키를 보내고 받고 그런 것이 없고 일단 연결되면 연결상태 유지(not stateless)

    HTTP에서는 매번 request할 때 마다 token을 보냄
    ws는 딱 한번만 보냄, 연결을 시작할 때 토큰을 보내는데 연결이 끝나지 않음
    많은 이벤트를 받고 보낼 수 있고 토큰을 다시 보낼 필요가 없음
    db에 접근하지 않고 메세지를 전달할 수 있음


    event waiting
        pubsub.publish("event",{resolver:"msg"});
        payload에는 resolver함수의 이름이 있어야 함
        event를 listening하고 있다가, 받으면 함수 작동

ws
    프로토콜의 일종, real time을 처리하는 web socket
    web socket을 활성화 해야 하고, http,ws 두 곳에서 모두 서버가 돌아갈 수 있어야 함 
    graphql module에 installSubscriptionHandlers:true
    graphql 서버가 웹 소켓 기능을 가지게 됨
    
    우리가 사용했던 X-JWT : HTTP Header에 포함, ws에서 사용 불가
    다른 방법을 찾아야 함

    APP_GUARD is working for http and ws.

pubsub
    Application level에서 한 개여야 함
    서버가 여러개이면 다른 방법을 찾아봐야 함
    
subscription filter
    args로 넘어온 것만 listening할 수 있음
    can filter by payload, variables, context
    should return boolean
    true일 경우 listen

subscription resolve
    response의 내용을 바꿀 수 있음


ex)
      @Mutation((returns) => Boolean)
  async triggerAnything(@Args('id') id: number) {
    await this.pubSub.publish('anything', { orderSubscription: `ready ${id}` });
    return true;
  }

  @Subscription((returns) => String, {
    filter: (payload, variables, context) => {
      return payload.orderSubscription === `ready ${variables.id}`;
    },
    resolve:({triggerAnything})=>`Your`
  })
  @Role(['Any'])
  orderSubscription(@AuthUser() user: User, @Args('id') id: number) {
    console.log(user);
    return this.pubSub.asyncIterator('anything');
  }


create vs save return
    save : 전체를 return 하지 않음
    create : 전체를 return


Eager Relation
    relation loaded automatically each time you load entities from the DB
    성능저하는 주의해야 함

Lazy Relation
    relation loaded once you access them
    await, Promise를 사용해서 그 필드를 access하면 typeORM이 load
