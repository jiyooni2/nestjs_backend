# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  coverImage: String
  slug: String!
  restaurants: [Restaurant!]!
  restaurantCount: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [Restaurant!]!
}

enum UserRole {
  Client
  Owner
  Delivery
}

type DishOption {
  name: String!
  choices: [String!]
  extra: Float
}

type Dish {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Float!
  photo: String
  description: String
  restaurant: Restaurant!
  options: [DishOption!]
}

type Restaurant {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  coverImage: String!
  address: String!
  owner: User!
  category: Category
  menu: [Dish!]!
}

type CreateRestaurantOutput {
  ok: Boolean!
  error: String
}

type EditRestaurantOutput {
  ok: Boolean!
  error: String
}

type DeleteRestaurantOutput {
  ok: Boolean!
  error: String
}

type AllCategoriesOutput {
  ok: Boolean!
  error: String
  categories: [Category!]
}

type CategoryOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  category: Category
}

type SeeRestaurantsOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  restaurants: [Restaurant!]
}

type SeeRestaurantOutput {
  ok: Boolean!
  error: String
  restaurant: Restaurant
}

type SearchRestaurantsOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  restaurants: [Restaurant!]
}

type CreateDishOutput {
  ok: Boolean!
  error: String
}

type CreateAccountOutput {
  ok: Boolean!
  error: String
}

type LoginOutput {
  ok: Boolean!
  error: String
  token: String
}

type UserProfileOutput {
  ok: Boolean!
  error: String
  user: User
}

type EditProfileOutput {
  ok: Boolean!
  error: String
}

type VerifyEmailOutput {
  ok: Boolean!
  error: String
}

type Query {
  hi: Boolean!
  me: User!
  userProfile(userId: Float!): UserProfileOutput!
  restaurants: [Restaurant!]!
  allCategories: AllCategoriesOutput!
  seeCategory(input: CategoryInput!): CategoryOutput!
  seeRestaurants(input: SeeRestaurantsInput!): SeeRestaurantsOutput!
  seeRestaurant(input: SeeRestaurantInput!): SeeRestaurantOutput!
  searchRestaurants(input: SearchRestaurantsInput!): SearchRestaurantsOutput!
}

input CategoryInput {
  page: Float = 1
  slug: String!
}

input SeeRestaurantsInput {
  page: Float = 1
}

input SeeRestaurantInput {
  restaurantId: Float!
}

input SearchRestaurantsInput {
  page: Float = 1
  query: String!
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  editProfile(input: EditProfileInput!): EditProfileOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
  createRestaurant(input: CreateRestaurantInput!): CreateRestaurantOutput!
  editRestaurant(input: EditRestaurantInput!): EditRestaurantOutput!
  deleteRestaurant(input: DeleteRestaurantInput!): DeleteRestaurantOutput!
  createDish(input: CreateDishInput!): CreateDishOutput!
}

input CreateAccountInput {
  email: String!
  password: String!
  role: UserRole!
}

input LoginInput {
  email: String!
  password: String!
}

input EditProfileInput {
  email: String
  password: String
}

input VerifyEmailInput {
  code: String!
}

input CreateRestaurantInput {
  name: String!
  coverImage: String!
  address: String!
  categoryName: String!
}

input EditRestaurantInput {
  name: String
  coverImage: String
  address: String
  categoryName: String
  restaurantId: Float!
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

input CreateDishInput {
  name: String!
  price: Float!
  description: String
  options: [DishOptionInputType!]
  restaurantId: Float!
}

input DishOptionInputType {
  name: String!
  choices: [String!]
  extra: Float
}
